<?php 
/**
* Copyright (c) 2015, TMSolution
* All rights reserved.
*
* For the full copyright and license information, please view
* the file LICENSE.md that was distributed with this source code.
*/
namespace  {{namespace}};

use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\AbstractType;
use Lexik\Bundle\FormFilterBundle\Filter\FilterOperands;
use Lexik\Bundle\FormFilterBundle\Filter\Form\Type as Filters;
use Core\PrototypeBundle\Form\FilterFormType as BaseFilterFormType;

/**
* FormType  for '{{entityName}}'.
*
* Generated with {@see TMSolution\PrototypeBundle\Command\GenerateFormTypeCommand}.
*/
class {{className}} extends BaseFilterFormType
{

protected $container;

public function buildForm(FormBuilderInterface $builder, array $options)
{



$builder
{% for field, fieldParam in fieldsInfo %}
    
    
{% if field !='id' %}{% if fieldParam.formType=='Filters\\NumberRangeFilterType::class' %}->add('{{field}}', {{fieldParam.formType}}, [
        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}',
        //'widget' => 'widget name',
        //'required' => true,
       'attr' => [
            'placeholder' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}',
        //    'class' => 'css class name',
        ]   
        ])
    {% elseif fieldParam.formType=='Filters\\DateTimeRangeFilterType::class' %}->add('{{field}}', {{fieldParam.formType}}, [
        'left_datetime_options' =>[
                        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.min',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ],
         'right_datetime_options' => [
                        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.max',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ]
        ]   
        ) 
    {% elseif fieldParam.formType=='Filters\\DateRangeFilterType::class' %}->add('{{field}}', {{fieldParam.formType}}, [
        
         'left_date_options' =>[
                        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.min',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ],
         'right_date_options' => [
                        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.max',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ]
        ])  
    {% elseif fieldParam.formType=='array' %}->add('{{field}}', 'choice', [
        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}'
        //'widget' => 'widget name',
        //'required' => true,
        //'choices' => array(
        //    'param1' => 'value1',
        //    'param2' => 'value2',
        //    'param3' => 'value3'
        //),
        //'attr' => [
        //    'placeholder' => 'placeholder text',
        //    'class' => 'css class name',
        //]   
        ])
    {% elseif fieldParam.formType=='entity' %}
        {% if fieldParam.object_name is defined %}{% set defaultFieldName=that.getDefaultField(fieldParam.object_name) %}{% endif %}
        
        {% if  defaultFieldName!="id" %}
        
        {% if fieldParam.association=='ManyToMany' or fieldParam.association=='OneToMany' %}//->add('{{field}}', 'entity', [
            //'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.{{defaultFieldName|lower}}_all',
            //'class' => '{{fieldParam.object_name}}',
            // 'query_builder' => function($repository) {
            // $qb = repository->createQueryBuilder('u');
            // return $qb->where($qb->expr()->neq('some_value', '?1'));
            //},
            //'expanded' =>false,
            //'multiple'=>true,
            //'label' => 'Label name',
            //'widget' => 'widget name',
            //'required' => true,
            //'choices' => array(
            //    'param1' => 'value1',
            //    'param2' => 'value2',
            //    'param3' => 'value3'
            //),
            //'empty_value' =>'{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.{{defaultFieldName|lower}}_all',
            //'choice_translation_domain' => true,
            //'attr' => [
            //    'placeholder' => 'placeholder text',
            //    'class' => 'css class name',
            //]   
            //])
        {% else %}->add('{{field}}', 'entity', [
            'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.{{defaultFieldName|lower}}_all',
            'class' => '{{fieldParam.object_name}}',
            // 'query_builder' => function($repository) {
            // $qb = repository->createQueryBuilder('u');
            // return $qb->where($qb->expr()->neq('some_value', '?1'));
            //},
            'empty_value' =>'{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}.{{defaultFieldName|lower}}_all',
            'choice_translation_domain' => true,
            //'label' => 'Label name',
            //'widget' => 'widget name',
            //'required' => true,
            //'choices' => array(
            //    'param1' => 'value1',
            //    'param2' => 'value2',
            //    'param3' => 'value3'
            //),
            //'attr' => [
            //    'placeholder' => 'placeholder text',
            //    'class' => 'css class name',
            //]   
            ])
        {% endif %} {% endif%}
    {% elseif fieldParam.formType=='Filters\\BooleanFilterType::class' %}->add('{{field}}', {#{{fieldParam.formType}}#}'choice', [
        'label' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}_yes_or_no',
        'mapped' => false,
        'choices' => array(
                null => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}_yes_or_no',
                '1' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}_yes',
                '0' => '{{lowerNameSpaceForTranslate}}.{{objectName|lower}}.{{field|lower}}_no',
        )
        
        //'widget' => 'widget name',
        //'required' => true,
        //'attr' => [
        //    'class' => 'css class name',
        //]   
        ]) 
    
{% endif %}{% if loop.last %};{% endif %}{% endif %}{% endfor %}

}


/**
* @param OptionsResolverInterface $resolver
*/
public function setDefaultOptions(OptionsResolverInterface $resolver)
{
$resolver->setDefaults(array(
"data_class" => "{{entityName}}",
'csrf_protection' => false,
));
}

/**
* @return string
*/
public function getName()
{
return '{{formTypeName}}';
}



public function setContainer($container)
{
    $this->container=$container;
}

}




