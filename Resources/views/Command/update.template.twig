<?php 
/**
 * Copyright (c) 2015, TMSolution
 * All rights reserved.
 *
 * For the full copyright and license information, please view
 * the file LICENSE.md that was distributed with this source code.
 */
namespace  {{formTypeNamespace}};

use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\AbstractType;

/**
 * FormType  for '{{entityName}}'.
 *
 * Generated with {@see TMSolution\PrototypeBundle\Command\GenerateFormTypeCommand}.
 */
class {{objectName}}Type extends AbstractType
{

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        
        $builder
        {% for field, fieldParam in fieldsInfo %}{% if fieldParam.formType=='text' %}->add('{{field}}', '{{fieldParam.formType}}', [
                //'label' => 'Label name',
                //'widget' => 'widget name',
                //'required' => true,
                //'attr' => [
                //    'placeholder' => 'placeholder text',
                //    'class' => 'css class name',
                //]
             ])
            {% elseif fieldParam.formType=='number' %}->add('{{field}}', '{{fieldParam.formType}}', [
                //'label' => 'Label name',
                //'widget' => 'widget name',
                //'required' => true,
                //'attr' => [
                //    'placeholder' => 'placeholder text',
                //    'class' => 'css class name',
                //]   
             ])
            {% else %}->add('{{field}}', '{{fieldParam.formType}}', [
                //'label' => 'Label name',
                //'widget' => 'widget name',
                //'required' => true,
                //'attr' => [
                //    'placeholder' => 'placeholder text',
                //    'class' => 'css class name',
                //]   
             ])
        {% endif %}{% if loop.last %};{% endif %}
        
        {% endfor %}
        
    }


    /**
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            "data_class" => "{{entityName}}",
            'csrf_protection' => false,
        ));
    }

    /**
     * @return string
     */
    public function getName()
    {
        return '{{formTypeName}}';
    }

}