<?php 
/**
 * Copyright (c) 2014, TMSolution
 * All rights reserved.
 *
 * For the full copyright and license information, please view
 * the file LICENSE.md that was distributed with this source code.
 */
namespace  {{namespace}};
use Core\PrototypeBundle\Config\ChartConfig;

/**
 * ViewConifg  for '{{entityName}}'.
 *
 * Generated with {@see TMSolution\PrototypeBundle\Command\GenerateViewConfigCommand}.
 */
class {{field|ucwords}} extends  ChartConfig
{

    public function getChart()
    {

        /*
        SPARKLINE CHARTS
        sevices:
            charts.sparkline.line
            charts.sparkline.bar
            charts.sparkline.pie
        parameters:
            type:                   mini or panel
            title:                  title field
            backgroundColorClass:   css colour class
            htmlContainerId:        html container to render chart
            listData:               for type panel ONLY !!!!!!
            data:                   array data ex. [['label'=>'Tile 1','value'=>'Value 1']...]
            value:                  values for minichart
        */
       
        $chart= $this->getContainer()->get('charts.sparkline.line');
        $options = [
            'type' => 'mini',
            //'listData' => $this->getListArrayData(),
            'htmlContainerId' => '{{field}}',
            'title' => '{{field|lower}}',
            'backgroundColorClass' => $this->backgroundColorClass[rand(0, 18)],
            'value' =>  $this->getValueData(),
            'data' => [1,3,2,5,4,7]
        ];
        $chart->setOptions($options);
        return $chart->render();
        
        
        
        /*
        EASY PIE CHARTS
        sevices:
            charts.easy.pie
        parameters:
            type:                   mini or panel
            title:                  title field
            backgroundColorClass:   css colour class
            htmlContainerId:        html container to render chart
            listData:               for type panel ONLY !!!!!!
            data:                   array data ex. [['label'=>'Tile 1','value'=>'Value 1']...]
            value:                  values for minichart
        */
        /*
        $chart = $this->getContainer()->get('charts.easy.pie');
        $options = [
            'type' => "mini",
            'htmlContainerId' => '{{field}}',
            'backgroundColorClass' => $this->backgroundColorClass[rand(0, 18)],
            'title' => '{{field|lower}}',
            'value' => $this->getValueData(),
            //'listData' => $this->getListArrayData(),
            'trackColor' => 'rgba(255,255,255,0.2)',
            'scaleColor' => 'rgba(255,255,255,0.5)',
            'barColor' => 'rgba(255,255,255,0.7)',
            'lineWidth' => 7,
            'lineCap' => 'butt'
        ];
        $chart->setOptions($options);
        return  $chart->render();
        */
        
        
        /*
        MORRIS CHARTS
        sevices:
            charts.morrisjs.line
            charts.morrisjs.bar
            charts.morrisjs.area
            charts.morrisjs.donut
        default parameters:
            htmlContainerId:            html container to render chart
            backgroundColorClass:       css colour class
            download:                   enable or disable download button (ex. true/false)
            downloadFileName:           name downloaded file (default 'chart')
            downloadButtonId:           chart button id
            data:                       array data ex. [['label'=>'Tile 1','value'=>'Value 1']...]
            isMasterRequest:            render method (true or false)
            hoverCallback:              hover callbacj function
            legend:                     display legend (true or false)
        line chart parameters:    
            labels:                     A list of strings containing labels for the data series to be plotted (corresponding to the values in the ykeys option). 
            xkey:                       A string containing the name of the attribute that contains X labels. ,
            ykeys:                      A list array of strings containing names of attributes that contain Y values (one for each series of data to be plotted). 
            xLabelFormatFn:             function label format ex."function(x){return ' '}",
            lineColors:                 Array containing colors
        area chart parameters:  
            labels:                     A list of strings containing labels for the data series to be plotted (corresponding to the values in the ykeys option). 
            xkey:                       A string containing the name of the attribute that contains X labels. ,
            ykeys:                      A list array of strings containing names of attributes that contain Y values (one for each series of data to be plotted). 
            lineColors:                 Array containing colors
            lineWidth:                  Width of the series lines, in pixels. 
            grid:                       Show grid (true/false)
            hideHover:                  Set to false to always show a hover legend.
                                        Set to true or 'auto' to only show the hover legend when the mouse cursor is over the chart.
                                        Set to 'always' to never show a hover legend.  
            fillOpacity:                Fill opacity default '1.0',
            pointSize:                  Diameter of the series points, in pixels. 
            xLabelFormatFn:             A function that accepts Date objects and formats them for display as x-axis labels. Overrides the default formatter chosen by the automatic labeller or the xLabels option.  ex."function(x){return ' '}",
            yLabelFormatFn:             A function that accepts y-values and formats them for display as y-axis labels. ex."function(y){return ' '}",
        bar chart parameters:  
            xkey:                       A string containing the name of the attribute that contains X labels. ,
            ykeys:                      A list array of strings containing names of attributes that contain Y values (one for each series of data to be plotted). 
            labels:                     A list of strings containing labels for the data series to be plotted (corresponding to the values in the ykeys option). 
            stacked:                    Set to true to draw bars stacked vertically. 
            hideHover:                  Set to false to always show a hover legend.
                                        Set to true or 'auto' to only show the hover legend when the mouse cursor is over the chart.
                                        Set to 'always' to never show a hover legend.  
            barColors:                  Array containing colors for the series bars. 
            
         
        */
        /*
        $chart = $this->getContainer()->get('charts.morrisjs.line');
        $data = $this->getListArrayData();
        
        $options = [
            'htmlContainerId'  => '{{field}}',
            'download' => false,
            'downloadFileName' => 'chart',
            'downloadButtonId' => 'chart-button-download-{{field}}',
            'data' => $data,
            'isMasterRequest' => true,
            //'hoverCallback' => null,
            'legend' => true,
        ];
        
        $lineOptions = [
            'labels' => ['Group 1'],
            'xkey' => 'label',
            'ykeys' => ['value'],
            'xLabelFormatFn' => "function(x){return ' '}",
            'lineColors' => [$this->colors[rand(0, 18)]],
        ];
        
        $areaOptions = [
            'labels' => ['Serie 1'],
            'xkey' => 'label',
            'ykeys' => ['value'],
            'lineColors' => [$this->colors[rand(0, 18)]],
            'backgroundColorClass' => $this->backgroundColorClass[rand(0, 18)],
            'lineWidth' => 0,
            'grid' => 'false',
            'hideHover' =>'auto',
            'fillOpacity' => '1.0',
            'pointSize' => 0,
            'xLabelFormatFn' => "function(x){return x.label.toString()}",
            'yLabelFormatFn' => "function(y){return y;}",
                      
        ];
        
        $barOptions = [
            'xkey' => 'label',
            'ykeys' => ['value'],
            'labels' => $this->getLabels($data),
            'stacked' => 'false',
            'hideHover' => 'auto',
            'barColors' => $this->colors[rand(0, 18)],
        ];
        
        $donutOptions = [
            'formatter' => "function (y, data) { return y; }",
            'colors' => $this->getColors($data),
            'labels' => $this->getLabels($data)
        ];
        
        $chart->setOptions(array_merge( $options, $lineOptions  ));//$lineOptions, $areaOptions, $barOptions, $donutOptions
        return  $chart->render();
        */
    }
    
    protected function getLabels($data){
    
        $arr=[];
        foreach($data as $element){
             $arr[]=$element['label'];
        }
        return $arr;
    
    }
    
    protected function getColors($data){
    
        $arr=[];
        for($i=0;$i<count($data);$i++){
            $arr[]=$this->colors[rand(0, 18)];
        }
        return $arr;
    
    }
    
    protected function getClassColors($data){
    
        $arr=[];
        for($i=0;$i<count($data);$i++){
            $arr[]=$this->backgroundColorClass[rand(0, 18)];
        }
        return $arr;
    
    }

    protected function getValueData()
    {

        $model = $this->getContainer()->get("model_factory")->getModel('{{entityName}}');
        $queryBuilder = $model->getQueryBuilder('u');
        $queryBuilder->select("count(_{{field}}.id) as counter");
        $queryBuilder->leftJoin("u.{{field}}", "_{{field}}");
        $result = $queryBuilder->getQuery()->getSingleScalarResult();

        return $result;
    } 

    protected function getListArrayData()
    {
        $model = $this->getContainer()->get("model_factory")->getModel('{{entityName}}');
        $queryBuilder = $model->getQueryBuilder('u');
        $queryBuilder->select("_{{field}}.{{fieldParam.default_field}} as label, count(_{{field}}.{{fieldParam.default_field}}) as value");
        $queryBuilder->join("u.{{field}}", "_{{field}}");
        $queryBuilder->groupBy("_{{field}}.{{fieldParam.default_field}}");
        $queryBuilder->orderBy("_{{field}}.{{fieldParam.default_field}}","ASC");
        $queryBuilder->setMaxResults(3);
        $result = $queryBuilder->getQuery()->getScalarResult();
        return $result;
    } 
}

