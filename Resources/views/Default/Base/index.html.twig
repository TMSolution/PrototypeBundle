<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8" />

        {% block css %}
            <link rel="stylesheet" href="{{ asset('assets/vendor/bootstrap/dist/css/bootstrap.min.css') }}">
            <link rel="stylesheet" href="{{ asset('bundles/coreprototype/css/grid.css') }}">
        {% endblock css%}  
        <style>

            .required:after {
                content: "*";
            }
        </style>

    </head>
    <body>


        <div id="page-container" class="container">
            {% block content %}

                {% block container %}
                    {% block element %}
                    {% endblock element%}    
                {% endblock container%}    

            {% endblock content%}  
        </div>


        {% block js %}
            <script src="{{ asset('assets/vendor/jquery/dist/jquery.min.js') }}" type="text/javascript"></script>
            <script src="{{ asset('assets/vendor/bootstrap/dist/js/bootstrap.min.js') }}"></script>
            <script src="{{ asset('assets/vendor/blockUI/jquery.blockUI.js') }}"></script>
            <script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
            <script src="{{ path('fos_js_routing_js', {'callback': 'fos.Router.setData'}) }}"></script>
            <script src="{{ asset('assets/vendor/jquery-validate/dist/jquery.validate.js') }}"></script>
            <script src="{{ asset('assets/vendor/jquery-validate/dist/additional-methods.js') }}"></script>
            <script src="{{ asset('bundles/coreprototype/js/validationtemplate.js') }}"></script>
            <!--<script src="{{ asset("bundles/coreprototype/js/lazyLoadedTab.js") }}"></script>-->

            <script>


                $.blockUI.defaults = {
                    message: '<h1>{{"Please wait"|trans}}...</h1>',
                    css: {
                        padding: 0,
                        margin: 0,
                        width: '30%',
                        top: '40%',
                        left: '35%',
                        textAlign: 'center',
                        color: '#000',
                        border: 'none',
                        backgroundColor: '#fff',
                        cursor: 'wait',
                    },
                    overlayCSS: {
                        backgroundColor: '#000',
                        opacity: 0.6,
                        cursor: 'wait'
                    },
                    baseZ: 1000,
                    showOverlay: true,
                    centerX: true, // <-- only effects element blocking (page block controlled via css above) 
                    centerY: true
                };


                (function ($) {

                    methods = {
                        settings: {
                            defaultContainer: null
                        },
                        init: function (settings) {

                            $.extend(this.settings, settings);
                            //console.debug(this.settings);
                            var that = this;
                            window.addEventListener('popstate', function (event) {

                                //console.log(event.state);
                                //console.debug('stop');
                                var state = event.state;
                                if (state)
                                {
                                    var context = state.context;
                                    //console.debug(context);
                                    that.loadData(window.location.href, context, false);


                                } else
                                {

                                    window.location.reload();

                                }




                            });



                        },
                        load: function (element, registerAsState, type, callback)
                        {
                            if (typeof (registerAsState) === "undefined") {
                                registerAsState = true;
                            }

                            var context = null;
                            var url = null;
                            //var method = null;
                            //var serializedForm = [];
                            var formParams = {};

                            //get URL
                            if (element.data("route"))
                            {
                                url = Routing.generate(element.data("route"), element.data("route-params"))
                            }
                            else if (type == 'form')
                            {
                                url = element.attr('action');

                            }
                            else
                            {
                                url = element.attr('href');
                            }

                            //get params
                            if (type == 'form')
                            {
                                var formParams = {
                                    method: element.attr('method'),
                                    data: element.serializeArray()
                                }
                            }
                            else if (type == 'tab')
                            {

                                var context = element.attr("href");
                                var splitContext = context.substr(1).split("-");
                                var displayUrl = window.location.href;
                                var lastHrefElement = displayUrl.split("/");
                                lastHrefElement = lastHrefElement[lastHrefElement.length - 1]

                                if (splitContext[1] != 'show' && lastHrefElement != splitContext[1]) {
                                    var displayUrl = displayUrl + "/" + splitContext[1];
                                }
                                else {
                                    registerAsState = false;
                                }

                            }
                            else if (element.data("route-target"))
                            {
                                var context = element.data("route-target");
                            }


                            if (typeof (context) === "undefined" || context == null) {
                                var context = this.settings.defaultContainer;
                            }


                            this.loadData(url, context, registerAsState, displayUrl, callback, formParams);

                        },
                        loadData: function (pushUrl, context, registerAsState, displayUrl, callback, formParams)
                        {

                            if (typeof (formParams) === "undefined") {
                                formParams = {};
                            }

                            if (typeof (displayUrl) === "undefined") {
                                displayUrl = pushUrl;
                            }

                            var ajaxUrl = '';
                            if ($(context).length) {
                                ajaxUrl = pushUrl;
                            }
                            else {
                                ajaxUrl = displayUrl;
                                context = this.settings.defaultContainer;
                            }

                            var ajaxParams = $.extend({url: ajaxUrl}, formParams);

                            $(context).fadeOut(150);
                            $.ajax(ajaxParams).done(function (data) {

                                if (registerAsState == true)
                                {
                                    history.pushState({'url': pushUrl, 'context': context, 'registerAsState': registerAsState}, pushUrl, displayUrl);
                                }
                                $(context).html(data);
                                $(context).fadeIn(700);
                                if (callback)
                                {
                                    callback(registerAsState);

                                }
                            });



                        }


                    }

                    $.fn.lazyLoader = function (options) {
                        if (methods[options]) {
                            return methods[ options ].apply(methods, (Array.prototype.slice.call(arguments, 1)));
                        } else if (typeof options === 'object' || !options) {
                            return methods['init'].apply(methods, arguments);
                        } else {
                            $.error('Method ' + options + ' does not exist on jQuery.lazyLoaded');
                        }
                    };




                })(jQuery);






                $(function () {
                    //@todo plugin needed
                    $().lazyLoader({defaultContainer: "#page-container"})

                    $(document).on('click', '.lazy-loaded-tab', function (e) {
                        e.preventDefault();
                        $().lazyLoader('load', $(this), true, 'tab', function () {
                        });
                    });

                    $(document).on('click', 'a:not(.not-lazy-loaded)', function (e) {
                        e.preventDefault();
                        $().lazyLoader('load', $(this), true);
                        return false;
                    });



//DOŁOŻYĆ TO DO LAZY LOADERA
                    $(document).on('submit', 'form', function (e) {
                        e.preventDefault();

                        $().lazyLoader('load', $(this), true, 'form');

                        /*
                         
                         var serializedForm = $(this).serializeArray();
                         var action=$(this).attr('action');
                         var method=$(this).attr('method');
                         
                         $.ajax({
                         url: action,
                         data: serializedForm,
                         method: method
                         }).done(function (data) {
                         console.debug(data);
                         });
                         */


                        return false;
                    });



                });










            </script>

        {% endblock js%}  
    </body>
</html>
