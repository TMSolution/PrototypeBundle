<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8" />

        {% block css %}
            <link rel="stylesheet" href="{{ asset('assets/vendor/bootstrap/dist/css/bootstrap.min.css') }}">
            <link rel="stylesheet" href="{{ asset('bundles/coreprototype/css/grid.css') }}">
        {% endblock css%}  
        <style>

            .required:after {
                content: "*";
            }
        </style>

    </head>
    <body>


        <div id="container" class="container">
            {% block content %}

                {% block container %}
                    {% block element %}
                    {% endblock element%}    
                {% endblock container%}    

            {% endblock content%}  
        </div>


        {% block js %}
            <script src="{{ asset('assets/vendor/jquery/dist/jquery.min.js') }}" type="text/javascript"></script>
            <script src="{{ asset('assets/vendor/bootstrap/dist/js/bootstrap.min.js') }}"></script>
            <script src="{{ asset('assets/vendor/blockUI/jquery.blockUI.js') }}"></script>
            <script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
            <script src="{{ path('fos_js_routing_js', {'callback': 'fos.Router.setData'}) }}"></script>
            <script src="{{ asset('assets/vendor/jquery-validate/dist/jquery.validate.js') }}"></script>
            <script src="{{ asset('assets/vendor/jquery-validate/dist/additional-methods.js') }}"></script>
            <script src="{{ asset('bundles/coreprototype/js/validationtemplate.js') }}"></script>
            <!--<script src="{{ asset("bundles/coreprototype/js/lazyLoadedTab.js") }}"></script>-->

            <script>


                $.blockUI.defaults = {
                    message: '<h1>Please wait...</h1>',
                    css: {
                        padding: 0,
                        margin: 0,
                        width: '30%',
                        top: '40%',
                        left: '35%',
                        textAlign: 'center',
                        color: '#000',
                        border: 'none',
                        backgroundColor: '#fff',
                        cursor: 'wait',
                    },
                    overlayCSS: {
                        backgroundColor: '#000',
                        opacity: 0.6,
                        cursor: 'wait'
                    },
                    baseZ: 1000,
                    showOverlay: true,
                    centerX: true, // <-- only effects element blocking (page block controlled via css above) 
                    centerY: true
                };


                (function ($) {

                    methods = {
                        settings: {
                            defaultContainer: null
                        },
                        init: function (settings) {

                            $.extend(this.settings, settings);
                            console.debug(this.settings);
                            var that=this;
                            window.addEventListener('popstate', function (event) {
                                    
                                    console.log(event.state);
                                    console.debug('stop');
                                    var state= event.state;
                                    if(state)   
                                    {
                                       var context= state.context; 
                                       console.debug(context);
                                        that.loadData(window.location.href, context, false);
                                       
                                
                                    }else
                                    {
                                        
                                        window.location.reload();
                                        
                                    }    
                                   
                                       
                                   
        
                              });



                        },
                        load: function (element, registerAsState, type, callback)
                        {
                            if (typeof(registerAsState) === "undefined") { registerAsState = true; }
                            if (element.data("route"))
                            {
                                var url = Routing.generate(element.data("route"), element.data("route-params"))


                            }
                            else if (type == 'form')
                            {


                            }
                            else
                            {
                                var url = element.attr('href');
                            }



                            if (type == 'tab')
                            {
                                var context = element.attr("href");

                            }
                            else if (element.data("route-target"))
                            {
                                var context = element.data("route-target");
                            }
                            else if (this.settings.defaultContainer)
                            {

                                var context =this.settings.defaultContainer;

                            }

                            console.debug(context);
                            var state = element.attr("href").substr(1);
                            this.loadData(url,  context, registerAsState, callback);

                        },
                        loadData: function (url,context, registerAsState, callback)
                        {
                            $(context).fadeOut(150);
                            $.ajax({
                                url: url,
                            }).done(function (data) {
                                
                                if(registerAsState==true)
                                {    
                                  history.pushState({ 'url': url, 'context': context, 'registerAsState': registerAsState  }, url, url);
                                }
                                $(context).html(data);
                                $(context).fadeIn(700);
                                if (callback)
                                {
                                    callback(registerAsState);

                                }
                            });

                        }


                    }

                    $.fn.lazyLoader = function (options) {
                        if (methods[options]) {
                            return methods[ options ].apply(methods, (Array.prototype.slice.call(arguments, 1)));
                        } else if (typeof options === 'object' || !options) {
                            return methods['init'].apply(methods, arguments);
                        } else {
                            $.error('Method ' + options + ' does not exist on jQuery.lazyLoaded');
                        }
                    };




                })(jQuery);






                $(function () {
                    //@todo plugin needed
                    $().lazyLoader({defaultContainer: "#container"})

                    $(document).on('click', '.lazy-loaded-tab', function (e) {
                        e.preventDefault();
                        $().lazyLoader('load', $(this), false, 'tab', function () {
                          
                        });
                    });

                    $(document).on('click', 'a:not(.not-lazy-loaded)', function (e) {
                        e.preventDefault();
                        $().lazyLoader('load', $(this), true);
                        return false;
                    });

                });










            </script>

        {% endblock js%}  
    </body>
</html>
